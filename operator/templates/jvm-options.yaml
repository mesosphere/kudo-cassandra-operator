apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Name }}-jvm-options
  namespace: {{ .Namespace }}
data:
  jvm.options: |
    ###########################################################################
    #                             jvm.options                                 #
    #                                                                         #
    # - all flags defined here will be used by cassandra to startup the JVM   #
    # - one flag should be specified per line                                 #
    # - lines that do not start with '-' will be ignored                      #
    # - only static flags are accepted (no variables or parameters)           #
    # - dynamic flags will be appended to these on cassandra-env              #
    ###########################################################################

    ######################
    # STARTUP PARAMETERS #
    ######################

    # Uncomment any of the following properties to enable specific startup parameters

    # In a multi-instance deployment, multiple Cassandra instances will independently assume that all
    # CPU processors are available to it. This setting allows you to specify a smaller set of processors
    # and perhaps have affinity.
    {{ if .Params.JVM_OPT_AVAILABLE_PROCESSORS }}
    -Dcassandra.available_processors={{ .Params.JVM_OPT_AVAILABLE_PROCESSORS }}
    {{ end }}

    # The directory location of the cassandra.yaml file.
    # -Dcassandra.config=directory

    # Sets the initial partitioner token for a node the first time the node is started.
    # -Dcassandra.initial_token=token

    # Set to false to start Cassandra on a node but not have the node join the cluster.
    {{ if .Params.JVM_OPT_JOIN_RING }}
    -Dcassandra.join_ring={{ .Params.JVM_OPT_JOIN_RING }}
    {{ end }}

    # Set to false to clear all gossip state for the node on restart. Use when you have changed node
    # information in cassandra.yaml (such as listen_address).
    {{ if .Params.JVM_OPT_LOAD_RING_STATE }}
    -Dcassandra.load_ring_state={{ .Params.JVM_OPT_LOAD_RING_STATE }}
    {{ end }}

    # Enable pluggable metrics reporter. See Pluggable metrics reporting in Cassandra 2.0.2.
    # -Dcassandra.metricsReporterConfigFile=file

    # Set the port on which the CQL native transport listens for clients. (Default: 9042)
    # Overrides the value set in cassandra.yaml.
    # -Dcassandra.native_transport_port=port

    # Overrides the value set in cassandra.yaml.
    # (Default: org.apache.cassandra.dht.Murmur3Partitioner)
    # -Dcassandra.partitioner=partitioner

    # To replace a node that has died, restart a new node in its place specifying the address of the
    # dead node. The new node must not have any data in its data directory, that is, it must be in the
    # same state as before bootstrapping.
    #
    # TODO(mpereira): we'll need to set this when replacing pods. Should we make
    # it configurable via params.yaml too?
    # -Dcassandra.replace_address=listen_address or broadcast_address of dead node

    # Allow restoring specific tables from an archived commit log.
    {{ if .Params.JVM_OPT_REPLAYLIST }}
    -Dcassandra.replayList={{ .Params.JVM_OPT_REPLAYLIST }}
    {{ end }}

    # Allows overriding of the default RING_DELAY (30000ms), which is the amount of time a node waits
    # before joining the ring.
    {{ if .Params.JVM_OPT_RING_DELAY_MS }}
    -Dcassandra.ring_delay_ms={{ .Params.JVM_OPT_RING_DELAY_MS }}
    {{ end }}

    # Set the port for the Thrift RPC service, which is used for client connections. (Default: 9160)
    # Overrides the value set in cassandra.yaml.
    # -Dcassandra.rpc_port=port

    # Set the SSL port for encrypted communication. (Default: 7001)
    # Overrides the value set in cassandra.yaml.
    # -Dcassandra.ssl_storage_port=port

    # Enable or disable the native transport server. See start_native_transport in cassandra.yaml.
    # Overrides the value set in cassandra.yaml.
    # -Dcassandra.start_native_transport=true|false

    # Enable or disable the Thrift RPC server. (Default: true)
    # Overrides the value set in cassandra.yaml.
    # -Dcassandra.start_rpc=true/false

    # Set the port for inter-node communication. (Default: 7000)
    # Overrides the value set in cassandra.yaml.
    # -Dcassandra.storage_port=port

    # Set the default location for the trigger JARs. (Default: conf/triggers)
    {{ if .Params.JVM_OPT_TRIGGERS_DIR }}
    -Dcassandra.triggers_dir={{ .Params.JVM_OPT_TRIGGERS_DIR }}
    {{ end }}

    # For testing new compaction and compression strategies. It allows you to experiment with different
    # strategies and benchmark write performance differences without affecting the production workload.
    {{ if .Params.JVM_OPT_WRITE_SURVEY }}
    -Dcassandra.write_survey={{ .Params.JVM_OPT_WRITE_SURVEY }}
    {{ end }}

    # To disable configuration via JMX of auth caches (such as those for credentials, permissions and
    # roles). This will mean those config options can only be set (persistently) in cassandra.yaml
    # and will require a restart for new values to take effect.
    {{ if .Params.JVM_OPT_DISABLE_AUTH_CACHES_REMOTE_CONFIGURATION }}
    -Dcassandra.disable_auth_caches_remote_configuration={{ .Params.JVM_OPT_DISABLE_AUTH_CACHES_REMOTE_CONFIGURATION }}
    {{ end }}

    # To disable dynamic calculation of the page size used when indexing an entire partition (during
    # initial index build/rebuild). If set to true, the page size will be fixed to the default of
    # 10000 rows per page.
    {{ if .Params.JVM_OPT_FORCE_DEFAULT_INDEXING_PAGE_SIZE }}
    -Dcassandra.force_default_indexing_page_size={{ .Params.JVM_OPT_FORCE_DEFAULT_INDEXING_PAGE_SIZE }}
    {{ end }}

    ########################
    # GENERAL JVM SETTINGS #
    ########################

    # enable assertions. highly suggested for correct application functionality.
    -ea

    # enable thread priorities, primarily so we can give periodic tasks
    # a lower priority to avoid interfering with client workload
    -XX:+UseThreadPriorities

    # allows lowering thread priority without being root on linux - probably
    # not necessary on Windows but doesn't harm anything.
    # see http://tech.stolsvik.com/2010/01/linux-java-thread-priorities-workar
    -XX:ThreadPriorityPolicy={{ .Params.JVM_OPT_THREAD_PRIORITY_POLICY }}

    # Enable heap-dump if there's an OOM
    -XX:+HeapDumpOnOutOfMemoryError

    # Per-thread stack size.
    -Xss{{ .Params.JVM_OPT_THREAD_STACK_SIZE }}

    # Larger interned string table, for gossip's benefit (CASSANDRA-6410)
    -XX:StringTableSize={{ .Params.JVM_OPT_STRING_TABLE_SIZE }}

    # Make sure all memory is faulted and zeroed on startup.
    # This helps prevent soft faults in containers and makes
    # transparent hugepage allocation more effective.
    -XX:+AlwaysPreTouch

    # Disable biased locking as it does not benefit Cassandra.
    -XX:-UseBiasedLocking

    # Enable thread-local allocation blocks and allow the JVM to automatically
    # resize them at runtime.
    -XX:+UseTLAB
    -XX:+ResizeTLAB
    -XX:+UseNUMA

    # http://www.evanjones.ca/jvm-mmap-pause.html
    -XX:+PerfDisableSharedMem

    # Prefer binding to IPv4 network intefaces (when net.ipv6.bindv6only=1). See
    # http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6342561 (short version:
    # comment out this entry to enable IPv6 support).
    -Djava.net.preferIPv4Stack={{ .Params.JVM_OPT_PREFER_IPV4_STACK }}

    ### Debug options

    # uncomment to enable flight recorder
    # -XX:+UnlockCommercialFeatures
    # -XX:+FlightRecorder

    # uncomment to have Cassandra JVM listen for remote debuggers/profilers on port 1414
    # -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1414

    # uncomment to have Cassandra JVM log internal method compilation (developers only)
    # -XX:+UnlockDiagnosticVMOptions
    # -XX:+LogCompilation

    #################
    # HEAP SETTINGS #
    #################

    # Heap size is automatically calculated by cassandra-env based on this
    # formula: max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))
    # That is:
    # - calculate 1/2 ram and cap to 1024MB
    # - calculate 1/4 ram and cap to 8192MB
    # - pick the max
    #
    # For production use you may wish to adjust this for your environment.
    # If that's the case, uncomment the -Xmx and Xms options below to override the
    # automatic calculation of JVM heap memory.
    #
    # It is recommended to set min (-Xms) and max (-Xmx) heap sizes to
    # the same value to avoid stop-the-world GC pauses during resize, and
    # so that we can lock the heap in memory on startup to prevent any
    # of it from being swapped out.
    {{ if .Params.NODE_MIN_HEAP_SIZE_MB }}
    -Xms{{ .Params.NODE_MIN_HEAP_SIZE_MB }}M
    {{ else }}
    -Xms{{ max (min 8192 (div .Params.NODE_MEM_MIB 4)) (min 1024 (div .Params.NODE_MEM_MIB 2)) }}m
    {{ end }}

    {{ if .Params.NODE_MAX_HEAP_SIZE_MB }}
    -Xmx{{ .Params.NODE_MAX_HEAP_SIZE_MB }}M
    {{ else }}
    -Xmx{{ max (min 8192 (div .Params.NODE_MEM_MIB 4)) (min 1024 (div .Params.NODE_MEM_MIB 2)) }}m
    {{ end }}

    # Young generation size is automatically calculated by cassandra-env
    # based on this formula: min(100 * num_cores, 1/4 * heap size)
    #
    # The main trade-off for the young generation is that the larger it
    # is, the longer GC pause times will be. The shorter it is, the more
    # expensive GC will be (usually).
    #
    # It is not recommended to set the young generation size if using the
    # G1 GC, since that will override the target pause-time goal.
    # More info: http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html
    #
    # The example below assumes a modern 8-core+ machine for decent
    # times. If in doubt, and if you do not particularly want to tweak, go
    # 100 MB per physical CPU core.
    #
    # TODO(mpereira): calculate this automatically based on the formula above.
    {{ if .Params.NODE_NEW_GENERATION_HEAP_SIZE_MB }}
    -Xmn{{ .Params.NODE_NEW_GENERATION_HEAP_SIZE_MB }}M
    {{ end }}

    ###################################
    # EXPIRATION DATE OVERFLOW POLICY #
    ###################################

    # Defines how to handle INSERT requests with TTL exceeding the maximum supported expiration date:
    # * REJECT: this is the default policy and will reject any requests with expiration date timestamp after 2038-01-19T03:14:06+00:00.
    # * CAP: any insert with TTL expiring after 2038-01-19T03:14:06+00:00 will expire on 2038-01-19T03:14:06+00:00 and the client will receive a warning.
    # * CAP_NOWARN: same as previous, except that the client warning will not be emitted.
    #
    {{ if .Params.JVM_OPT_EXPIRATION_DATE_OVERFLOW_POLICY }}
    -Dcassandra.expiration_date_overflow_policy={{ .Params.JVM_OPT_EXPIRATION_DATE_OVERFLOW_POLICY }}
    {{ end }}

    #################
    #  GC SETTINGS  #
    #################

    ### CMS Settings

    -XX:+UseParNewGC
    -XX:+UseConcMarkSweepGC
    -XX:+CMSParallelRemarkEnabled

    {{ if .Params.JVM_OPT_SURVIVOR_RATIO }}
    -XX:SurvivorRatio={{ .Params.JVM_OPT_SURVIVOR_RATIO }}
    {{ end }}

    {{ if .Params.JVM_OPT_MAX_TENURING_THRESHOLD }}
    -XX:MaxTenuringThreshold={{ .Params.JVM_OPT_MAX_TENURING_THRESHOLD }}
    {{ end }}

    {{ if .Params.JVM_OPT_CMS_INITIATING_OCCUPANCY_FRACTION }}
    -XX:CMSInitiatingOccupancyFraction={{ .Params.JVM_OPT_CMS_INITIATING_OCCUPANCY_FRACTION }}
    {{ end }}

    -XX:+UseCMSInitiatingOccupancyOnly

    {{ if .Params.JVM_OPT_CMS_WAIT_DURATION }}
    -XX:CMSWaitDuration={{ .Params.JVM_OPT_CMS_WAIT_DURATION }}
    {{ end }}

    -XX:+CMSParallelInitialMarkEnabled
    -XX:+CMSEdenChunksRecordAlways
    # some JVMs will fill up their heap when accessed via JMX, see CASSANDRA-6541
    -XX:+CMSClassUnloadingEnabled

    ### G1 Settings (experimental, comment previous section and uncomment section below to enable)

    ## Use the Hotspot garbage-first collector.
    # -XX:+UseG1GC
    #
    ## Have the JVM do less remembered set work during STW, instead
    ## preferring concurrent GC. Reduces p99.9 latency.
    {{ if .Params.JVM_OPT_G1R_SET_UPDATING_PAUSE_TIME_PERCENT }}
    -XX:G1RSetUpdatingPauseTimePercent={{ .Params.JVM_OPT_G1R_SET_UPDATING_PAUSE_TIME_PERCENT }}
    {{ end }}
    #
    ## Main G1GC tunable: lowering the pause target will lower throughput and vise versa.
    ## 200ms is the JVM default and lowest viable setting
    ## 1000ms increases throughput. Keep it smaller than the timeouts in cassandra.yaml.
    {{ if .Params.JVM_OPT_MAX_GC_PAUSE_MILLIS }}
    -XX:MaxGCPauseMillis={{ .Params.JVM_OPT_MAX_GC_PAUSE_MILLIS }}
    {{ end }}

    ## Optional G1 Settings

    # Save CPU time on large (>= 16GB) heaps by delaying region scanning
    # until the heap is 70% full. The default in Hotspot 8u40 is 40%.
    {{ if .Params.JVM_OPT_INITIATING_HEAP_OCCUPANCY_PERCENT }}
    -XX:InitiatingHeapOccupancyPercent={{ .Params.JVM_OPT_INITIATING_HEAP_OCCUPANCY_PERCENT }}
    {{ end }}

    # For systems with > 8 cores, the default ParallelGCThreads is 5/8 the number of logical cores.
    # Otherwise equal to the number of cores when 8 or less.
    # Machines with > 10 cores should try setting these to <= full cores.
    # -XX:ParallelGCThreads=16
    # By default, ConcGCThreads is 1/4 of ParallelGCThreads.
    # Setting both to the same value can reduce STW durations.
    {{ if .Params.JVM_OPT_CONC_GC_THREADS }}
    -XX:ConcGCThreads={{ .Params.JVM_OPT_CONC_GC_THREADS }}
    {{ end }}

    ### GC logging options -- uncomment to enable

    -XX:+PrintGCDetails
    -XX:+PrintGCDateStamps
    -XX:+PrintHeapAtGC
    -XX:+PrintTenuringDistribution
    -XX:+PrintGCApplicationStoppedTime
    -XX:+PrintPromotionFailure

    {{ if .Params.JVM_OPT_PRINT_FLS_STATISTICS }}
    -XX:PrintFLSStatistics={{ .Params.JVM_OPT_PRINT_FLS_STATISTICS }}
    {{ end }}

    {{ if .Params.JVM_OPT_GC_LOG_DIRECTORY }}
    -Xloggc:{{ .Params.JVM_OPT_GC_LOG_DIRECTORY }}
    {{ end }}

    -XX:+UseGCLogFileRotation

    {{ if .Params.JVM_OPT_NUMBER_OF_GC_LOG_FILES }}
    -XX:NumberOfGCLogFiles={{ .Params.JVM_OPT_NUMBER_OF_GC_LOG_FILES }}
    {{ end }}

    {{ if .Params.JVM_OPT_GC_LOG_FILE_SIZE }}
    -XX:GCLogFileSize={{ .Params.JVM_OPT_GC_LOG_FILE_SIZE }}
    {{ end }}

    ### Allow the JVM to read CGgroup memory information. This is JDK 8/9
    ### specific and deprecated on JDK 10. It will have to be removed for
    ### Cassandra 4.0 which will use JDK 11.
    -XX:+UnlockExperimentalVMOptions
    -XX:+UseCGroupMemoryLimitForHeap

    {{ if .Params.CUSTOM_JVM_OPTIONS_BASE64 }}
    {{ .Params.CUSTOM_JVM_OPTIONS_BASE64 | b64dec }}
    {{ end }}
