apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Name }}-node-readiness-probe-sh
  namespace: {{ .Namespace }}
data:
  node-readiness-probe.sh: |
    nodetool status -p {{ .Params.JMX_PORT }} | grep -q "UN  ${POD_IP}"
  node-token-save.sh: |
    # Used to capture the token map from a newly created cluster and save it
    # Not used at the moment
    if [ ! -f /var/lib/cassandra/token_map ]; then
        while [ -z $NODE_TOKENS ]; do
            NODE_ID=`nodetool info | grep ID | sed -n -e 's/ID[[:space:]]*\:[[:space:]]*\(.*\)$/\1/p'`
            NODE_IP=`nodetool status | grep $NODE_ID | sed -n -e 's/UN[[:space:]]*\([0-9.]*\)[[:space:]]*.*/\1/p'`
            NODE_TOKENS=`nodetool ring | grep $NODE_IP | awk '{ print $8 }' ORS=',' | sed 's/,$//'`
            echo $NODE_TOKENS > /var/lib/cassandra/token_map
        done
    fi
  restore-capture-tokenmap.sh: |
    # Used as a start command for medusa restore to redirect the passed in token map for the actual startup
    if [ ! -z "$JVM_OPTS" ]; then
      echo "$JVM_OPTS" | sed -n -e 's/-Dcassandra.initial_token=\([-0-9,]*\)[[:space:]].*/\1/p' > /var/lib/cassandra/token_map
    fi
  init-container-restore.sh: |
    # Used to restore data in the init container of medusa
    if [ ! -d /var/lib/cassandra/data ]; then
      echo "Start Restore for node '{{ .Params.RESTORE_OLD_NAME }}' from backup '{{ .Params.BACKUP_NAME }}' in prefix '{{ .Params.BACKUP_PREFIX }}'";
      mkdir -p /var/lib/cassandra/data;
      /usr/local/bin/medusa --fqdn {{ .Params.RESTORE_OLD_NAME }}-node-$POD_ID.{{ .Params.RESTORE_OLD_NAME }}-svc.{{ .Params.RESTORE_OLD_NAMESPACE }}.svc.cluster.local restore-node --backup-name {{ .Params.BACKUP_NAME }}
    else
      echo "Skip Restore, the data directory for cassandra already exists."
    fi
  wait-for-node-zero.sh: |
    # With parallel startup of all nodes, we still need to make sure that the first node is reachable for all others, otherwise
    # we may end up with separate clusters. So every node except node-0 waits for node-0 to be reachable
    if [ "$POD_NAME" != "{{ .Name }}-node-0" ]; then
      while :; do cqlsh {{ .Name }}-node-0.{{ .Name }}-svc.{{ .Namespace }}.svc.cluster.local -e "SELECT uuid() FROM system.local" > /dev/null 2>&1 && break; echo "Waiting for node-0 to be available..."; sleep 5; done;
    fi;