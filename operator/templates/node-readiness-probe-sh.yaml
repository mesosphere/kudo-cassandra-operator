apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Name }}-node-readiness-probe-sh
  namespace: {{ .Namespace }}
data:
  node-readiness-probe.sh: |
    nodetool status -p {{ .Params.JMX_PORT }} | grep -q "UN  ${POD_IP}"
  node-token-save.sh: |
    # Used to capture the token map from a newly created cluster and save it
    if [ ! -f /var/lib/cassandra/token_map ]; then
        while [ -z $NODE_TOKENS ]; do
            NODE_ID=`nodetool info | grep ID | sed -n -e 's/ID[[:space:]]*\:[[:space:]]*\(.*\)$/\1/p'`
            NODE_IP=`nodetool status | grep $NODE_ID | sed -n -e 's/UN[[:space:]]*\([0-9.]*\)[[:space:]]*.*/\1/p'`
            NODE_TOKENS=`nodetool ring | grep $NODE_IP | awk '{ print $8 }' ORS=',' | sed 's/,$//'`
            echo $NODE_TOKENS > /var/lib/cassandra/token_map
        done
    fi
  restore-capture-tokenmap.sh: |
    # Used as a start command for medusa restore to redirect the passed in token map for the actual startup
    if [ ! -z "$JVM_OPTS" ]; then
      echo "$JVM_OPTS" | sed -n -e 's/-Dcassandra.initial_token=\([-0-9,]*\)[[:space:]].*/\1/p' > /var/lib/cassandra/token_map
    fi